box:
  id: openjdk:8
# defining the dev pipeline
dev:
  steps:
    - script:
      name: gradle run
      code: |
        ./gradlew run
# Build definition
build:
  steps:
    # A step that executes `gradle installBootDist` command
    - java/gradle:
      task: installBootDist
      version: 4.2
      cache_project_cache: true
    - script:
      name: copy installation files
      code: |
        cp -r ./build/install/springboot-demo-boot "$WERCKER_OUTPUT_DIR"
    - script:
      name: copy k8s template files
      code: |
        cp ./*.template "$WERCKER_OUTPUT_DIR"

# Push docker image
push-image:
  box:
    id: openjdk
  steps:
    - internal/docker-push:
      tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
      working-dir: $WERCKER_ROOT
      entrypoint: "springboot-demo-boot/bin/springboot-demo"
      username: $DOCKER_USERNAME # Registry username
      password: $DOCKER_PASSWORD # Registry password
      registry: $DOCKER_REGISTRY
      repository: $DOCKER_REPO
deploy-to-oke:
  box:
    id: alpine
    cmd: /bin/sh
  steps:
    - bash-template

    - script:
        name: "Visualise Kubernetes config"
        code: cat $WERCKER_ROOT/kubernetes-deployment.yml

    - kubectl:
        name: delete namespace
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: delete namespace $WERCKER_APPLICATION_OWNER_NAME --ignore-not-found=true

    - script:
        name: wait to delete namespace
        code: sleep 30

    - kubectl:
        name: create namespace
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create namespace $WERCKER_APPLICATION_OWNER_NAME

    - kubectl:
        name: create OCR secret
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create secret docker-registry wrelease --docker-server=wcr.io --docker-username=$WERCKER_APPLICATION_OWNER_NAME --docker-password=$KUBERNETES_TOKEN --docker-email=${WERCKER_APPLICATION_OWNER_NAME}@mail.com --namespace=$WERCKER_APPLICATION_OWNER_NAME

    - kubectl:
        name: create deplyoment
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/kubernetes-deployment.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME

    - script:
        name: "Visualise Ingress config"
        code: cat ingress.yml

    - kubectl:
        name: create Ingress configuration
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: create -f $WERCKER_ROOT/ingress.yml --namespace=$WERCKER_APPLICATION_OWNER_NAME

    - kubectl:
        name: get LoadBalancer public IP address
        server: $KUBERNETES_MASTER
        token: $KUBERNETES_TOKEN
        insecure-skip-tls-verify: true
        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces

push-to-gcr:
  box:
    id: openjdk
  steps:
    - internal/docker-push:
      tag: $WERCKER_GIT_BRANCH-$WERCKER_GIT_COMMIT
      working-dir: $WERCKER_ROOT
      entrypoint: "springboot-demo-boot/bin/springboot-demo"
      ports: "8080"
      username: _json_key
      password: $GCP_KEY_JSON
      repository: $GCR_TAG
      registry: $GCR_HOST/v2

deploy-to-gke:
  box: python:2.7
  steps:
    - bash-template

    - script:
        name: "Visualise Kubernetes config"
        code: cat $WERCKER_ROOT/kubernetes-deployment-gke.yml

    - riceo/kubectl:
        name: deploy to GKE
        server: $GKE_KUBERNETES_MASTER
        gcloud-key-json: $GCP_KEY_JSON
        gke-cluster-name: $GKE_CLUSTER_NAME
        gke-cluster-zone: $GKE_CLUSTER_ZONE
        gke-cluster-project: $GKE_CLUSTER_PROJECT
        command: apply -f $WERCKER_ROOT/kubernetes-deployment-gke.yml

    - riceo/kubectl:
        name: get LoadBalancer public IP address
        server: $GKE_KUBERNETES_MASTER
        gcloud-key-json: $GCP_KEY_JSON
        gke-cluster-name: $GKE_CLUSTER_NAME
        gke-cluster-zone: $GKE_CLUSTER_ZONE
        gke-cluster-project: $GKE_CLUSTER_PROJECT
        command: get svc -o jsonpath='{.items[*].status.loadBalancer.ingress[*].ip}' --all-namespaces
